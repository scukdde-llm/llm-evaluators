import codec.json
import analysis
link args = context.cmd_args
var df = new analysis.dataframe{{"Language", "Model", "Metric", "Score", "Levrage"}}
var baseline_scores = json.to_var(json.from_stream(iostream.ifstream(args[2] + system.path.separator + "rating_output.json"))).scores
df.data.push_back({"English", args[2], "Precision", baseline_scores.en.P, 0})
df.data.push_back({"English", args[2], "Recall", baseline_scores.en.R, 0})
df.data.push_back({"English", args[2], "F1", baseline_scores.en.F1, 0})
df.data.push_back({"Chinese", args[2], "Precision", baseline_scores.zh.P, 0})
df.data.push_back({"Chinese", args[2], "Recall", baseline_scores.zh.R, 0})
df.data.push_back({"Chinese", args[2], "F1", baseline_scores.zh.F1, 0})
df.data.push_back({"All", args[2], "Precision", baseline_scores.all.P, 0})
df.data.push_back({"All", args[2], "Recall", baseline_scores.all.R, 0})
df.data.push_back({"All", args[2], "F1", baseline_scores.all.F1, 0})
foreach i in range(3, args.size)
    var scores = json.to_var(json.from_stream(iostream.ifstream(args[i] + system.path.separator + "rating_output.json"))).scores
    df.data.push_back({"English", args[i], "Precision", scores.en.P, (scores.en.P - baseline_scores.en.P)/baseline_scores.en.P})
    df.data.push_back({"English", args[i], "Recall", scores.en.R, (scores.en.R - baseline_scores.en.R)/baseline_scores.en.R})
    df.data.push_back({"English", args[i], "F1", scores.en.F1, (scores.en.F1 - baseline_scores.en.F1)/baseline_scores.en.F1})
    df.data.push_back({"Chinese", args[i], "Precision", scores.zh.P, (scores.zh.P - baseline_scores.zh.P)/baseline_scores.zh.P})
    df.data.push_back({"Chinese", args[i], "Recall", scores.zh.R, (scores.zh.R - baseline_scores.zh.R)/baseline_scores.zh.R})
    df.data.push_back({"Chinese", args[i], "F1", scores.zh.F1, (scores.zh.F1 - baseline_scores.zh.F1)/baseline_scores.zh.F1})
    df.data.push_back({"All", args[i], "Precision", scores.all.P, (scores.all.P - baseline_scores.all.P)/baseline_scores.all.P})
    df.data.push_back({"All", args[i], "Recall", scores.all.R, (scores.all.R - baseline_scores.all.R)/baseline_scores.all.R})
    df.data.push_back({"All", args[i], "F1", scores.all.F1, (scores.all.F1 - baseline_scores.all.F1)/baseline_scores.all.F1})
end
df.to_csv(args[1])
